plugins {
    id 'java-library'
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"

    // quality
    id 'com.diffplug.spotless' version '6.25.0'
    id 'jacoco'

    // Publishing
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

apply from: 'publish.gradle'

group = 'dev.openfga'
version = '0.1.0'

java {
    sourceCompatibility = 17
    targetCompatibility = 17

    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.boot:spring-boot'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    api 'dev.openfga:openfga-sdk:0.8.1'

    compileOnly 'com.fasterxml.jackson.core:jackson-databind'
    compileOnly 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compileOnly 'org.openapitools:jackson-databind-nullable:0.2.6'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-core:5.15.2'
}

test {
    useJUnitPlatform()
}

spotless {
    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore', '*.gradle'
        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        palantirJavaFormat()
        removeUnusedImports()
        importOrder()
    }
    flexmark {
        target "*.md"
        flexmark()
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    // tests are required to run before generating a JaCoCo coverage report.
    dependsOn test
}

tasks.register('fmt') {
    dependsOn 'spotlessApply'
}
